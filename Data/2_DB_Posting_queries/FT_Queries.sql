
update master_dd
set type='DD'
update master_nsb
set type='NSB'
update master_refund
set type='REFUND'
update master_sb
set type='SB'
update master_UTR
set type='UTR'

ALTER TABLE master_nsb
MODIFY TYPE DEFAULT 'NSB';

ALTER TABLE master_refund
MODIFY TYPE DEFAULT 'REFUND';
commit
ALTER TABLE master_sb
MODIFY TYPE DEFAULT 'SB';
commit
ALTER TABLE master_UTR
MODIFY TYPE DEFAULT 'UTR';
commit
ALTER TABLE master_DD
MODIFY TYPE DEFAULT 'DD';
commit

--Insert to MASTER_LAN table from MASTER_DD, MASTER_NSB, MASTER_REFUND, MASTER_SB, MASTER_UTR
INSERT INTO MASTER_LAN(PRODUCT_NAME,
URNNUMBER,
CBS_ACCOUNT_NO,
NAME_OF_BENEFICIARY,
BENEFICIARY_BANK_ACCOUNTNO,
IFSC_CODE,
AMOUNT,
PAYMENT_DATE,
MOBILE_NUMBER,
UTR,
STATUS,
HDID,
TYPE)
SELECT PRODUCT_NAME,
URNNUMBER,
CBS_ACCOUNT_NO,
NAME_OF_BENEFICIARY,
BENEFICIARY_BANK_ACCOUNTNO,
IFSC_CODE,
AMOUNT,
PAYMENT_DATE,
MOBILE_NUMBER,
UTR,
STATUS,
HDID,
TYPE
FROM master_refund;

INSERT INTO MASTER_LAN(CODTRANID,
BRNCODE,
REMITACCOUNTTYPE,
REMITACCOUNTNO,
REMITTERNAME,
CHQNO,
REMITAMOUNT,
IFSC_CODE,
BENEFACCOUNTTYPE,
BENEFACCOUNTNO,
BENEFNAME,
URNNUMBER,
CBS_ACCOUNT_NO,
ORIGDETAIL3,
ORIGDETAIL4,
REF_NETWORK_NO,
COMMENTS,
NAM_HOFF_FILE,
DATE_UTR,
STATUS,
TYPE)
SELECT CODTRANID,
BRNCODE,
REMITACCOUNTTYPE,
REMITACCOUNTNO,
REMITTERNAME,
CHQNO,
REMITAMOUNT,
IFSC_CODE,
BENEFACCOUNTTYPE,
BENEFACCOUNTNO,
BENEFNAME,
URNNUMBER,
CBS_ACCOUNT_NO,
ORIGDETAIL3,
ORIGDETAIL4,
REF_NETWORK_NO,
COMMENTS,
NAM_HOFF_FILE,
DATE_UTR,
STATUS,
TYPE
FROM master_utr;

/*1. --cbs table data to be loaded by bot- "CBS_Data" Table(monthly once)
2.-- "CBS_Data" Table mfi=8 , delete MFI_code='10' records
DELETE FROM CBS WHERE MFI_CODE='10';*/
truncate statements:
DELETE FROM SFDC_DUMP;

1. Load MASTER table data into MASTER_LAN table
(paid/rejected cases)

UPDATE MASTER_LAN
SET CBS_ACCOUNT_NO=TRIM(CBS_ACCOUNT_NO);

3. Load the excel downloaded into "BC_PARTNERS" Table (IDF has -netoff, lan) This net off amt to be transfered to CASA Acc.
---imported-by sidu--13-sep-2021

3a. Check the CONFIG table (BC name, BC emailID). Update the "BC PARTNERS" table with bc_partner name, BC_CODE from the config table.
--BC_partner(APP_NO, CBS_LAN, BC_NAME ,BC_EMAIL_ID, BC_CODE)
--CONFIG(BC_NAME, BC_EMAIL_ID,BC_CODE)
--BC_CODE is created for our internal purpose only@nr sir @23-Sep-21

UPDATE BC_PARTNER
SET LOAN_ACCOUNT_NO=TRIM(LOAN_ACCOUNT_NO)

MERGE INTO BC_PARTNER B
USING ( SELECT DISTINCT(D.BC_NAME), D.BC_EMAILID, D.BC_CODE
    FROM CONFIG D) TEMP
ON (B.BC_EMAILID = TEMP.BC_EMAILID)
WHEN MATCHED THEN 
UPDATE SET B.BC_NAME=TEMP.BC_NAME,
B.BC_CODE=TEMP.BC_CODE;

--5 rows
4. Load data into "Internal_DD_Req"(CBS_Acc_Number) table and "Internal_FT_Req" tables(LAN) table 	
imported
to do: excel with the fields changed for ft and dd(karthik)

5. Load atyathi data into "ATYATI" table (Loan_account_number)
--import by BOT

5a. Load the data into ATYATI table (combination of LAN, URN, GROUPID)
ALTER TABLE ATYATI ADD CONSTRAINT NO_DUPLICATE UNIQUE(LOAN_ACCOUNT_NUMBER,URN, GROUPID);

6. Load "Atyati Group_ID_TEMP" table.
---import the data received in mail into TEMP table. UPDATE the status='YES'
---push the new records and Update status of old records ='YES'
 UPDATE ATYATI_GROUPID_TEMP
 SET ACTIVE_STATUS='YES'
 COMMIT;
---insert new records and update old records.
--06-oct-21
MERGE INTO ATYATI_GROUPID L
USING (SELECT DISTINCT(D.GROUP_ID), D.STATE, D.GROUP_NAME, D.PRODUCT_CODE , D.ACTIVE_STATUS
FROM ATYATI_GROUPID_TEMP D) TMP
ON (L.GROUP_ID = TMP.GROUP_ID)
WHEN MATCHED THEN
UPDATE SET L.ACTIVE_STATUS ='Yes'
WHEN NOT MATCHED THEN INSERT (L.GROUP_ID, L.STATE, L.GROUP_NAME, L.PRODUCT_CODE, L.ACTIVE_STATUS)
VALUES (TMP.GROUP_ID, TMP.STATE, TMP.GROUP_NAME, TMP.PRODUCT_CODE, TMP.ACTIVE_STATUS)
where TMP.GROUP_ID IS NOT NULL;
COMMIT;
 
7. sql: Consider matched GroupID in "ATYATI" table. Unmatched GROUPIDs list to be created/remove the unmatched GROUPID related LANs from "ATYATI" table/send report.
--Atyathi_GroupId(Group_ID, ACTIVE_STATUS=YES)
--ATYATI(Group_ID)
7a----gid not in Atyati table
Select distinct(GROUPID) from Atyati where GROUPID NOT IN (Select Distinct(Group_ID) from Atyati_GroupId_Temp WHERE ACTIVE_STATUS='YES');

7b----gid not in atyati_Groupid table
Select Distinct(Group_ID) from Atyati_GroupId_Temp 
where ACTIVE_STATUS='YES' AND 
Group_ID NOT IN (Select Distinct(Group_ID) from Atyati where GROUPID is not null);

--matched to be moved to FT. don't remove unmatched records from Atyati table.@nr sir 15-sep-21
7a. Identify unmatched GroupIds list
Select * from Atyathi where GROUP_ID NOT IN (Select Distinct(Group_ID) from Atyathi_GroupId_Temp WHERE ACTIVE_STATUS='YES')
Delete from Atyathi_GroupId_Temp

8. "SFDC_DUMP" table is loaded and available.

9. If LAN from table("BC_PARTNERS") match to "SFDC_DUMP" table, then SFDC_Matched FLAG='Yes'.
else
SFDC_Matched FLAG='No'.

---SFDC(LOAN_ACCOUNT_NO)
---BC_PARTNER(LOAN_ACCOUNT_NO)
MERGE INTO BC_PARTNER L
USING (SELECT DISTINCT(D.LOAN_ACCOUNT_NO)
FROM SFDC_DUMP D)TMP
ON(L.LOAN_ACCOUNT_NO = TMP.LOAN_ACCOUNT_NO)
WHEN MATCHED THEN 
UPDATE SET L.SFDC_MATCHED='YES';

---delete old data of SFDC table. truncate script to be used.
10. generate the report and mail: pick only SFDC_Matched FLAG='No/Null' from "SFDC_DUMP" table

SELECT * FROM BC_PARTNER
WHERE SFDC_MATCHED_FLAG NOT IN ('Yes');
COMMIT;

11. Insert the LAN, FT_Date(created_date) with SFDC_Matched FLAG='Yes' into "FT" table. 
<----insert internal table details-->
UPDATE INTERNAL_FT_REQ
SET CATEGORY='INTERNAL_FT';
COMMIT;

UPDATE INTERNAL_DD_REQ
SET CATEGORY='INTERNAL_DD';
COMMIT;

<---11a_Ins_bcPartner_to_FT.sql--->
INSERT INTO FT(ACCOUNT_NUMBER, LO_LOAN_AMT_GOAL_AMT, LO_CHARGES_AGR_IN_RS_GL_IN_PS,FUND_TRANSFER_AMOUNT)
SELECT LOAN_ACCOUNT_NO, LO_LOAN_AMT_GOAL_AMT,LO_CHARGES_AGR_IN_RS_GL_IN_PS,FUND_TRANSFER_AMOUNT 
FROM BC_PARTNER;
COMMIT;

<--11b_Ins_atyati_to_FT.sql-->
---Avoid duplicate entries to table.

INSERT INTO FT(ACCOUNT_NUMBER, SANCTION_AMOUNT, INSURANCE_PERC, TOTAL_CHARGES1, CUSTOMER_FUNDS_TRANSFER_AMT, PENNY_DROP, VENDOR_FUND_TRANSFER_AMOUNT, 
PENNY_DROP1) 
SELECT URN, CUSTOMERID, LOAN_ACCOUNT_NUMBER, SANCTION_AMOUNT,
BORROWERINSURANCE,
COBORROWERINSURANCE,
PROCESSINGFEE,
GST,
TOTAL_CHARGES1,
CUSTOMERNAME,
CUSTOMERBANKACCNO,
CUSTOMERMOBILENO,
CUSTOMERBANK,
CUSTOMERIFSCCODE,
CUSTOMERDISBURSAAMT,
CUSTOMER_FUNDS_TRANSFER_AMT,
PENNY_DROP,
TOTAL_CASA_AMOUNT,
VENDORNAME,
VENDORBANK,
VENDORSAVINGACCNO,
VENDORIFSCCODE,
VENDORDISBURSALAMT,
VENDOR_FUND_TRANSFER_AMOUNT,
PENNY_DROP1,
TOTAL_CASA_AMOUNT1,
GROUPID,
GROUPNAME,
CENTERNAME,
PRODUCT,
STATUS,
INSURANCE_PERC,
TOTAL_CHARGES1, CUSTOMER_FUNDS_TRANSFER_AMT ,PENNY_DROP ,VENDOR_FUND_TRANSFER_AMOUNT ,PENNY_DROP1 
FROM ATYATI 

<--11c_Trim_FT_LANS.sql-->
UPDATE FT
SET ACCOUNT_NUMBER=TRIM(ACCOUNT_NUMBER);

<-----Import FT and DD data into FT table------------>
-- DB_Check need not be done for product type=RPA and Insurance.

INSERT INTO FT(  PAYMENT_MODE, URN_NUMBER, ACCOUNT_NUMBER, ACCOUNT_HOLDER, BENEFICIARY_ACCOUNT_NUMBER,
   IFSC_CODE, AMOUNT, TRANSACTION_DATE, PRODUCT_TYPE, LOT_TYPE, MOBILE_NUMBER,
   REMARKS, CLOSURE_ACCOUNT_NUMBER, APP_NUMBER, CLOSURE_AMOUNT, CATEGORY, HD_TICKET) 
SELECT PAYMENT_MODE,
URN_NO,
CBS_ACCOUNT_NUMBER,
ACCOUNT_HOLDER,
BENEFICIARY_BANK_ACCOUNT_NO,
IFSC_Code,
AMOUNT,
TRANSACTION_DATE,
PRODUCT_TYPE,
LOT_TYPE,
MOBILE_NUMBER,
REMARKS,
CLOSURE_ACCOUNT_NUMBER,
APP_NUMBER,
CLOSURE_AMOUNT,
CATEGORY, 
HD_TICKET FROM INTERNAL_FT_REQ WHERE DB_CHECK='MATCHED' AND FLG_HOLD ='NO' OR PRODUCT_TYPE IN ('RPA','Insurance');

INSERT INTO FT(DEBIT_ACCOUNT_NO, PAYMENT_MODE,BENEFICIARY_NAME, AMOUNT,PAYMENT_DATE,REMARKS_1, PRINT_LOCATION_BB_NAME, PAYABLE_LOCATION, EMPLOYEE_NAME, 
EMPLOYEE_ID_NO,ACCOUNT_NUMBER,APP_NUMBER,BRANCH_CODE_PRINT_LOCATION_BB, REMARKS_2, CUSTOMER_NAME, CATEGORY , HD_TICKET)
SELECT 
DEBIT_ACCOUNT_NO,
PAYMENT_MODE,
BENEFICIARY_NAME,
AMOUNT,
PAYMENT_DATE,
REMARKS_1,
PRINT_LOCATION_BB_NAME,
PAYABLE_LOCATION,
EMPLOYEE_NAME,
EMPLOYEE_ID,
CBS_LOAN_ACCOUNT_NUMBER,
APPLICATION_NO,
BRANCH_CODE_PRINT_LOCATION_BB,
REMARKS_2,
CUSTOMER_NAME,
CATEGORY,
HD_TICKET FROM INTERNAL_DD_REQ WHERE DB_CHECK='MATCHED' AND FLG_HOLD ='NO'
COMMIT

<--11d_Upd_ftCategory.sql-->
UPDATE FT
SET CATEGORY=CASE
WHEN ACCOUNT_NUMBER IN (SELECT DISTINCT(LOAN_ACCOUNT_NUMBER) FROM ATYATI) THEN 'ATYATI'
WHEN ACCOUNT_NUMBER IN (SELECT DISTINCT(LOAN_ACCOUNT_NO) FROM BC_PARTNER) THEN 'BC_PARTNER'
END
WHERE ACCOUNT_NUMBER IS NOT NULL;  
COMMIT;

<------Data_TRIM:----------->
UPDATE FT
SET ACCOUNT_NUMBER=TRIM(ACCOUNT_NUMBER),
IFSC_CODE=trim(IFSC_CODE),
URN_NUMBER=trim(URN_NUMBER),
MOBILE_NUMBER=TRIM(MOBILE_NUMBER),
BENEFICIARY_ACCOUNT_NUMBER=TRIM(BENEFICIARY_ACCOUNT_NUMBER),
PRODUCT_TYPE=TRIM(PRODUCT_TYPE)
WHERE ACCOUNT_NUMBER IS NOT NULL;
COMMIT;

<------BUFFER_Query.sql---------------->
UPDATE FT
SET 
LAN_CHECK= NULL, 
MOBILE_NUMBER_CHECK=NULL,
CASA_CHECK=NULL,
IFSC_CODE_CHECK=NULL,
SPECIAL_CHAR_CHECK=NULL
WHERE ACCOUNT_NUMBER IS NOT NULL;
COMMIT;

UPDATE MASTER_LAN
SET CBS_ACCOUNT_NO=TRIM(CBS_ACCOUNT_NO);

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<				>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



14. Validation: 
<-----------14_Duplicate_LAN------------------>--Dec added "remarks is null" check
--FT(ACCOUNT_NUMBER, LAN_CHECK)
--MASTER(CBS_ACCOUNT_NO)
MERGE INTO FT L
USING (SELECT DISTINCT(D.CBS_ACCOUNT_NO)
    FROM MASTER_LAN D) TMP
ON (L.ACCOUNT_NUMBER = TMP.CBS_ACCOUNT_NO AND L.REMARKS is not null)
WHEN MATCHED THEN 
UPDATE SET L.LAN_CHECK ='NO' AND L.REASON='Check LAN';--duplicate_lan
COMMIT;

--15_if remarks has 'Tranch/Parallel' then continue with FT
UPDATE FT
SET LAN_CHECK='YES'
WHERE LAN_CHECK IS NULL;
COMMIT;
--to take LAN_CHECK is YES
<---------------MobileNo_Check------------------->
--FT(MOBILE_NUMBER_VALID, MOBILE_NUMBER)
--16_check_Mobile_No
UPDATE FT
SET MOBILE_NUMBER_CHECK=CASE
WHEN REGEXP_LIKE(MOBILE_NUMBER,'^[23456]') OR LENGTH(MOBILE_NUMBER)<10 OR REGEXP_LIKE(MOBILE_NUMBER,'^[1234]')
THEN 'NO' 
ELSE 'YES'
END
WHERE MOBILE_NUMBER IS NOT NULL;
COMMIT;

-- to take mobile_number =yes
<-------------CASA Account--------------->
--master lan -Ft table:matched LAN and len>14, then 
MERGE INTO FT L
USING (SELECT DISTINCT(D.CBS_ACCOUNT_NO)
    FROM MASTER_LAN D) TMP
ON (L.ACCOUNT_NUMBER = TMP.CBS_ACCOUNT_NO AND LENGTH(L.ACCOUNT_NUMBER)>14)
WHEN MATCHED THEN 
UPDATE SET L.CASA_CHECK ='YES';
COMMIT;

UPDATE FT
SET CASA_CHECK='NO'
WHERE CASA_CHECK IS NULL;
COMMIT;
--to take CASA_CHECK='NO'

--Dec21
--Upd_Upper_IFSC_Code.sql
UPDATE FT
SET IFSC_CODE= UPPER(IFSC_CODE);
COMMIT;

<-----------IFSC Code.sql------------->
/*MERGE INTO FT L
USING (SELECT DISTINCT(D.IFSC_CODE)
    FROM IFSC_MASTER D) TMP
ON (L.IFSC_CODE = TMP.IFSC_CODE)
WHEN MATCHED THEN 
UPDATE SET L.IFSC_CODE_CHECK ='YES'
WHEN NOT MATCHED THEN
UPDATE SET L.IFSC_CODE_CHECK='NO';*/

UPDATE IFSC_MASTER 
SET IFSC_CODE=TRIM(IFSC_CODE);
COMMIT;

---fetch only NEFT_ENABLED='YES'  cases and check for IFSC_CODE from master--Dec
UPDATE FT
SET IFSC_CODE_CHECK=CASE
WHEN IFSC_CODE IN (SELECT DISTINCT(IFSC_CODE) FROM IFSC_MASTER WHERE NEFT_ENABLED='YES') THEN 'YES'
ELSE 'NO'
END
WHERE ACCOUNT_NUMBER IS NOT NULL;
COMMIT;
---03Dec21:


---4 rows
/*<---Upd_IFSCCode_where_NULL.sql----->
update FT
SET IFSC_CODE_CHECK='NO'
where IFSC_CODE_CHECK IS NULL*/
--to take IFSC_CODE='YES'

<----------Length_check----------->--DEC, CASA length to be checked
--LENGTH(URN=16, cbs_lan=14, ifsc_code=11)

UPDATE FT
SET LENGTH_CHECK=
CASE WHEN LENGTH(IFSC_CODE)=11 AND LENGTH(ACCOUNT_NUMBER)=14 AND LENGTH(URN_NUMBER)=16 AND LENGTH(CASA_NUMBER) THEN 'NO'
ELSE 'YES'
END
WHERE URN_NUMBER IS NOT NULL OR IFSC_CODE IS NOT NULL OR ACCOUNT_NUMBER IS NOT NULL;
/*
SELECT IFSC_CODE, LENGTH(IFSC_CODE), ACCOUNT_NUMBER, LENGTH(ACCOUNT_NUMBER), URN_NUMBER, LENGTH(URN_NUMBER), account_number
FROM FT
WHERE LENGTH_CHECK='NO'
*/
--25rows 
--21 rows
--to take LENGTH_CHECK='YES'
--SELECT DISTINCT(LENGTH_CHECK) FROM FT
<---Special_Char.sql--->

special_char on URN, CBS_LOAN_ACC, IFSC_Code, Mobile_No, BENEFICIARY_ACC_NO, 
BENEFICIARY_NAME, 
--WHEN spchar_check =no, it indicates no spec_char are present.

UPDATE FT
SET SPECIAL_CHAR_CHECK=
CASE WHEN not regexp_like(URN_NUMBER,'^[:DIGIT:]') AND
REGEXP_LIKE(account_number,'^[0-9a-zA-Z]+$') AND
NOT regexp_like(IFSC_Code,'[^[:alnum:]]')  AND
NOT regexp_like(MOBILE_NUMBER,'^[:DIGIT:]') AND
regexp_like(BENEFICIARY_ACCOUNT_NUMBER, '^[0-9a-zA-Z]+$') 
--NOT REGEXP_LIKE(BENEFICIARY_NAME ,'[^[:alpha:][:space:]]')
THEN 'NO'
ELSE 'YES'
END
WHERE URN_NUMBER IS NOT NULL OR ACCOUNT_NUMBER IS NOT NULL OR IFSC_Code IS NOT NULL OR 
MOBILE_NUMBER IS NOT NULL OR BENEFICIARY_ACCOUNT_NUMBER IS NOT NULL
OR BENEFICIARY_NAME IS NOT NULL;
COMMIT;
--03Dec2021, Upd_remove_SpecialChar_in_BeneficiaryName.sql
UPDATE FT
SET BENEFICIARY_NAME=REGEXP_REPLACE(BENEFICIARY_NAME, '[^[:alpha:][:space:]]', '')
where BENEFICIARY_NAME IS NOT NULL;
COMMIT;

--25 rows
/*
select special_char_check, count(*) from ft
where special_char_check is not null
group by special_char_check;

select URN_NUMBER, account_number, IFSC_Code, MOBILE_NUMBER,BENEFICIARY_ACCOUNT_NUMBER, BENEFICIARY_NAME,special_char_check
from ft
where special_char_check='YES'*/
--'^[#!$^&*%./\|]' 
'.*[^a-zA-Z0-9 .{}\[\]].*')
-------------------------------
charges Computations:
--1. bc_partners: stored_procedure
COMPUTE_BC
--2. ATYATI: stored_procedure
COMPUTE_ATYATI
--3.internal
--COMPUTE_INTERNAL (TBD)-not req.

<---UpdFt_status_post_validation--->
UPDATE FT
SET FT_STATUS=CASE
WHEN LENGTH_CHECK='NO' AND SPECIAL_CHAR_CHECK='NO' AND IFSC_CODE_CHECK='YES' AND CASA_CHECK='NO' AND MOBILE_NUMBER_CHECK='YES' AND LAN_CHECK='YES' AND TOTAL_CHARGES_MATCHING='0' AND FT_AMOUNT_MATCHING='0' THEN 'APPROVED_FT' 
WHEN LENGTH_CHECK='YES' OR SPECIAL_CHAR_CHECK='YES' OR IFSC_CODE_CHECK='NO' OR CASA_CHECK='YES' OR MOBILE_NUMBER_CHECK='NO' OR LAN_CHECK='NO' OR TOTAL_CHARGES_MATCHING='0' OR FT_AMOUNT_MATCHING='0' THEN 'REJECTED_FT'
END
WHERE ACCOUNT_NUMBER IS NOT NULL;

<-----Upd_Reason_for_Rejection.sql--Dec
UPDATE FT
SET REASON= CASE
WHEN IFSC_CODE_CHECK='NO' THEN 'Invalid IFSC CODE'
WHEN CASA_CHECK='YES' THEN 'Invalid CASA'
WHEN MOBILE_NUMBER_CHECK='NO' THEN 'Invalid Mobile Number'
WHEN LAN_CHECK='NO' THEN 'Invalid LAN'
WHEN SPECIAL_CHAR_CHECK='YES' THEN 'Invalid!! Check if Special character in URN_NUMBER/Account_Number/IFSC_Code/MOBILE_NUMBER/BENEFICIARY_ACCOUNT_NUMBER'
WHEN LENGTH_CHECK='YES' THEN 'Invalid!! Check length in IFSC_CODE/ACCOUNT_NUMBER/URN_NUMBER/CASA number'
END
WHERE IFSC_CODE IS NOT NULL OR MOBILE_NUMBER IS NOT NULL ;
COMMIT;

---- verify charges output: is Zero then update status='APPROVED_FT' else 'REJECTED_FT'--Dec
--Upd_Atyati_Matched_Charges.sql
MERGE INTO FT L
USING (SELECT DISTINCT(LOAN_ACCOUNT_NUMBER), FT_AMOUNT_MATCHING 
    FROM ATYATI D) TMP
ON (L.ACCOUNT_NUMBER = TMP.LOAN_ACCOUNT_NUMBER AND TMP.FT_AMOUNT_MATCHING='0')
WHEN MATCHED THEN 
UPDATE SET L.FT_STATUS='APPROVED_FT';

--Upd_Atyati_Unmatched_Charges.sql
MERGE INTO FT L
USING (SELECT DISTINCT(LOAN_ACCOUNT_NUMBER), FT_MATCHING 
    FROM ATYATI D) TMP
ON (L.ACCOUNT_NUMBER = TMP.LOAN_ACCOUNT_NUMBER AND TMP.FT_MATCHING!='0')
WHEN MATCHED THEN 
UPDATE SET L.FT_STATUS='REJECTED_FT';

--Upd_BC_PARTNER_Matched_Charges.sql
MERGE INTO FT L
USING (SELECT DISTINCT(ACCOUNT_NO), FT_AMT_MATCHING 
    FROM BC_PARTNER D) TMP
ON (L.ACCOUNT_NUMBER = TMP.ACCOUNT_NO AND TMP.FT_AMT_MATCHING='0')
WHEN MATCHED THEN 
UPDATE SET L.FT_STATUS='APPROVED_FT';

--Upd_BC_PARTNER_UnMatched_Charges.sql
MERGE INTO FT L
USING (SELECT DISTINCT(ACCOUNT_NO), FT_AMT_MATCHING 
    FROM BC_PARTNER D) TMP
ON (L.ACCOUNT_NUMBER = TMP.ACCOUNT_NO AND TMP.FT_AMT_MATCHING=!'0')
WHEN MATCHED THEN 
UPDATE SET L.FT_STATUS='REJECTED_FT';

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<task to do 10_DEc_2021 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


------Report-------
create the report for BC_PARTNERS and INTERNAL cases:
SELECT * from FT WHERE CATEGORY='BC_PARTNER' AND FT_STATUS='REJECTED_FT'
SELECT * FROM FT WHERE CATEGORY ='ATYATI' AND FT_STATUS='REJECTED_FT'
SELECT * FROM FT WHERE CATEGORY IN ('INTERNAL_FT','INTERNAL_DD') AND FT_STATUS='REJECTED_FT'

<-----InsNewA&L_account------->on 28-sep-2021
--delete old A&L account FROM FT AND SFDC DUMP :
--REJECTED_FT(ACCOUNT_NUMBER, GROUPID, CORRECT_ACC, CORRECT_AL, WRONG_AL)

--UPDATE THE AL RECORD. CREATE A SEPARATE EXCEL AND IN ONE LOOP BOT HAS TO DELETE ALL THE OLD AL RECORDS.

UPDATE FT
SET AL_NUMBER=(SELECT CORRECT_AL FROM REJECTED_FT WHERE WRONG_AL IS NOT NULL)
WHERE AL_NUMBER IS NOT NULL;

UPDATE SFDC_DUMP
SET AL_DETAILS_NO=(SELECT CORRECT_AL FROM REJECTED_FT WHERE WRONG_AL IS NOT NULL)
WHERE AL_DETAILS_NO IS NOT NULL;

--EXCEL:BOT TO EXPORT THIS EXCEL 
SELECT ACCOUNT_NUMBER,GROUPID,CORRECT_ACC,CORRECT_AL,WRONG_AL
FROM REJECTED_FT 
WHERE CORRECT_AL IS NOT NULL;

<---records_on_Hold--->
MERGE INTO FT L
USING (SELECT DISTINCT(LOAN_ACCOUNT_NUMBER), REASON_FOR_HOLD, WITH_HELD_DATE 
    FROM FT_ON_HOLD D) TMP
ON (L.ACCOUNT_NUMBER = TMP.LOAN_ACCOUNT_NUMBER)
WHEN MATCHED THEN 
UPDATE SET L.REASON_FOR_HOLD =TMP.REASON_FOR_HOLD,
L.WITH_HELD_DATE=TMP.WITH_HELD_DATE,
L.FT_STATUS='HOLD';

--CREATE REPORT TO INDIVIDUAL BC PARTNERS AND CONSOLIDATED REPORT FOR INTERNAL CASES
<----IDENTIFY CASA INTERNAL OR EXTERNAL-->
UPDATE FT SET FT_TYPE=CASE 
WHEN REGEXP_LIKE(IFSC_CODE,'[JSFB]') THEN 'INTERNAL_FT'
ELSE 'EXTERNAL_FT'
END
WHERE ACCOUNT_NUMBER IS NOT NULL AND FT_STATUS='APPROVED_FT' OR IFSC_CODE IS NOT NULL;
<-----CREATE INTERNAL AND EXTERNAL POSTING SHEETS-------->

SELECT * FROM FT
WHERE CATEGORY in ('INTERNAL_FT','INTERNAL_DD')

SELECT * FROM FT
WHERE CATEGORY not in ('INTERNAL_FT','INTERNAL_DD')

<----FT_STATUS UPDATION POST NEFT TRANSFER----->
-----PAID/FAILED CASES

MERGE INTO FT L
USING (SELECT DISTINCT(SENDER_ACC_NO), STATUS 
    FROM NEFT_INCOMING D) TMP
ON (L.ACCOUNT_NUMBER = TMP.SENDER_ACC_NO)
WHEN MATCHED THEN 
UPDATE SET L.FT_STATUS = TMP.STATUS;

<----UPDATE_MASTER_WITH_PASSED_ACCOUNT----->
--CHECK THE COLUMN NAMES TO INSERT
INSERT INTO MASTER_LAN(ACCOUNT_NUMBER, LO_LOAN_AMT_GOAL_AMT, LO_CHARGES_AGR_IN_RS_GL_IN_PS,FUND_TRANSFER_AMOUNT)
SELECT ACCOUNT_NUMBER, LO_LOAN_AMT_GOAL_AMT, LO_CHARGES_AGR_IN_RS_GL_IN_PS,FUND_TRANSFER_AMOUNT
FROM FT
WHERE FT_STATUS='SUCCESS'
COMMIT;

<-----CREATE INTERNAL AND EXTERNAL FAILED POSTING SHEETS------->
SELECT * FROM FT
WHERE FT_TYPE='INTERNAL' AND FT_STATUS='FAILED'

SELECT * FROM FT
WHERE FT_TYPE='EXTERNAL' AND FT_STATUS='FAILED'

<----FAILED_FT_RECORDS REPORT _DB_REVERSAL------>
SELECT * FROM FT
WHERE FT_STATUS='FAILED';
-------------------------------------------------------------------------------------
DBPosting:29-oct-2021:03-nov-2021
--included a new column DB_CHECK in FT:

CREATE INDEX DBP_NEW_CBS_ACCOUNT_NO_i
ON DB_POSTING(NEW_CBS_ACCOUNT_NO);
COMMIT;

UPDATE INTERNAL_DD_REQ
SET CBS_LOAN_ACCOUNT_NUMBER=TRIM(CBS_LOAN_ACCOUNT_NUMBER), AMOUNT=TRIM(AMOUNT);
COMMIT;

UPDATE DB_POSTING
SET NEW_CBS_ACCOUNT_NO=TRIM(NEW_CBS_ACCOUNT_NO), FT_AMOUNT=TRIM(FT_AMOUNT);
COMMIT;

--INTERNAL_DD_REQ(CBS_LOAN_ACCOUNT_NUMBER, AMOUNT, DB_CHECK)
--DB_POSTING(NEW_CBS_ACCOUNT_NO,FT_AMOUNT )
--1. matching cases

   MERGE INTO INTERNAL_DD_REQ dest
   USING (SELECT DISTINCT(D.NEW_CBS_ACCOUNT_NO), D.FT_AMOUNT 
   FROM DB_POSTING_1 D)src
   ON(dest.CBS_LOAN_ACCOUNT_NUMBER=src.NEW_CBS_ACCOUNT_NO AND dest.AMOUNT <=src.FT_AMOUNT)
   WHEN MATCHED
   THEN 
   UPDATE SET dest.DB_CHECK='MATCHED';
   
--2. Hold in case the Amount is greater than    

   MERGE INTO INTERNAL_DD_REQ dest
   USING (SELECT DISTINCT(D.NEW_CBS_ACCOUNT_NO), D.FT_AMOUNT 
   FROM DB_POSTING D)src
   ON(dest.CBS_LOAN_ACCOUNT_NUMBER=src.NEW_CBS_ACCOUNT_NO AND dest.AMOUNT > src.FT_AMOUNT)
   WHEN MATCHED
   THEN 
   UPDATE SET dest.DB_CHECK='HOLD';
--insert only "Matched" records to FT from INTERNAL_DD_REQ Table    
   
--INTERNAL_FT_REQ(CBS_ACCOUNT_NUMBER, AMOUNT)
--DB_POSTING(NEW_CBS_ACCOUNT_NO,FT_AMOUNT)
 
   --1. matching cases-- other than RPA and Insurance to be considered for db_CHECK--Dec
UPDATE INTERNAL_FT_REQ
SET CBS_ACCOUNT_NUMBER=TRIM(CBS_ACCOUNT_NUMBER), AMOUNT=TRIM(AMOUNT);
COMMIT;

   MERGE INTO INTERNAL_FT_REQ dest
   USING (SELECT DISTINCT(D.NEW_CBS_ACCOUNT_NO), D.FT_AMOUNT 
   FROM DB_POSTING_1 D)src
   ON(dest.CBS_ACCOUNT_NUMBER=src.NEW_CBS_ACCOUNT_NO AND dest.AMOUNT <=src.FT_AMOUNT AND dest.PRODUCT_TYPE NOT IN ('RPA','Insurance'))
   WHEN MATCHED
   THEN 
   UPDATE SET dest.DB_CHECK='MATCHED';
   
    
--2. Hold in case the Amount is greater than    
 MERGE INTO INTERNAL_FT_REQ dest
   USING (SELECT DISTINCT(D.NEW_CBS_ACCOUNT_NO), D.FT_AMOUNT 
   FROM DB_POSTING D)src
   ON(dest.CBS_ACCOUNT_NUMBER=src.NEW_CBS_ACCOUNT_NO AND dest.AMOUNT > src.FT_AMOUNT)
   WHEN MATCHED
   THEN 
   UPDATE SET dest.DB_CHECK='HOLD';
   
---------------------------------------------   
--29-nov-21:
--handle hold cases for internal HD tickets: 
--In Email account number will be mentioned. 
--This is read by bot and stored in an excel. --later imported to INTERNAL_HOLD table.    
CREATE TABLE "INTERNAL_HOLD" 
   ("ROW_ID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CREATEDDATE" DATE DEFAULT SYSTIMESTAMP, 
	"ACCOUNT_NUMBER" VARCHAR2(50 BYTE)
    )    
COMMIT;
	
CREATE INDEX ACCOUNT_NUMBER_i
ON INTERNAL_HOLD(ACCOUNT_NUMBER);
COMMIT;

UPDATE INTERNAL_HOLD
SET ACCOUNT_NUMBER=TRIM(ACCOUNT_NUMBER);
	
---(SELECT DISTINCT(ACCOUNT_NUMBER) FROM INTERNAL_HOLD)
  
   MERGE INTO INTERNAL_FT_REQ dest
   USING (SELECT DISTINCT(D.ACCOUNT_NUMBER) 
   FROM INTERNAL_HOLD D)src
   ON(dest.CBS_ACCOUNT_NUMBER=src.ACCOUNT_NUMBER)
   WHEN MATCHED
   THEN 
   UPDATE SET dest.FLG_HOLD='YES';
   
   MERGE INTO INTERNAL_DD_REQ dest
   USING (SELECT DISTINCT(D.ACCOUNT_NUMBER) 
   FROM INTERNAL_HOLD D)src
   ON(dest.CBS_LOAN_ACCOUNT_NUMBER=src.ACCOUNT_NUMBER)
   WHEN MATCHED
   THEN 
   UPDATE SET dest.FLG_HOLD='YES';
   
--insert query is updated to pick other than FLG_HOLD='YES'